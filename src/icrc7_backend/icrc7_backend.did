type Account = record { owner : principal; subaccount : opt blob };
type Event = record {
  id : text;
  title : text;
  metadata : MetadataValue;
  description : text;
};
type Group = record {
  group_leader : Account;
  group_members : vec Member;
  group_name : text;
};
type Member = record { name : text; internet_identity : text };
type MetadataValue = variant { Int : int; Nat : nat; Blob : blob; Text : text };
type RequestResult = record { body : vec nat; code : nat16; message : text };
type RequestResult_1 = record {
  body : vec Event;
  code : nat16;
  message : text;
};
type RequestResult_10 = record {
  body : vec record { nat; text };
  code : nat16;
  message : text;
};
type RequestResult_11 = record {
  body : opt bool;
  code : nat16;
  message : text;
};
type RequestResult_12 = record {
  body : vec opt Account;
  code : nat16;
  message : text;
};
type RequestResult_13 = record {
  body : vec opt Result;
  code : nat16;
  message : text;
};
type RequestResult_2 = record {
  body : vec record { text; Group };
  code : nat16;
  message : text;
};
type RequestResult_3 = record {
  body : vec Member;
  code : nat16;
  message : text;
};
type RequestResult_4 = record { body : opt text; code : nat16; message : text };
type RequestResult_5 = record { body : opt nat; code : nat16; message : text };
type RequestResult_6 = record { body : text; code : nat16; message : text };
type RequestResult_7 = record {
  body : vec opt vec record { text; MetadataValue };
  code : nat16;
  message : text;
};
type RequestResult_8 = record { body : nat; code : nat16; message : text };
type RequestResult_9 = record {
  body : vec MetadataValue;
  code : nat16;
  message : text;
};
type Result = variant { Ok : nat; Err : TransferError };
type TransferArg = record {
  to : Account;
  token_id : nat;
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  Duplicate : record { duplicate_of : nat };
  NonExistingTokenId;
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  InvalidRecipient;
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
service : {
  assign_event_to_group : (text, vec Member) -> (RequestResult);
  create_event : (text, text, MetadataValue) -> ();
  get_all_events : () -> (RequestResult_1) query;
  get_all_groups : () -> (RequestResult_2) query;
  get_all_icrc7_collections : () -> (
      vec record { principal; principal },
    ) query;
  get_group_members : (text) -> (RequestResult_3) query;
  get_icrc7_description : (principal) -> (RequestResult_4) query;
  get_icrc7_logo : (principal) -> (RequestResult_4) query;
  get_icrc7_max_memo_size : (principal) -> (RequestResult_5) query;
  get_icrc7_max_query_batch_size : (principal) -> (
      RequestResult_5,
    ) query;
  get_icrc7_max_take_value : (principal) -> (RequestResult_5) query;
  get_icrc7_max_update_batch_size : (principal) -> (
      RequestResult_5,
    ) query;
  get_icrc7_name : (principal) -> (RequestResult_6) query;
  get_icrc7_supply_cap : (principal) -> (RequestResult_5) query;
  get_icrc7_symbol : (principal) -> (RequestResult_6) query;
  get_icrc7_token_metadata : (vec nat, principal) -> (
      RequestResult_7,
    ) query;
  get_icrc7_total_supply : (principal) -> (RequestResult_8) query;
  get_token_metadata : (nat, text) -> (RequestResult_9) query;
  get_user_icrc7_collections : () -> (
      vec record { principal; principal },
    ) query;
  get_user_tokens_collection : () -> (RequestResult_10) query;
  icrc7_atomic_batch_transfers : (principal) -> (
      RequestResult_11,
    ) query;
  icrc7_balance_of : (vec Account, principal) -> (
      RequestResult,
    ) query;
  icrc7_owner_of : (vec nat, principal) -> (RequestResult_12) query;
  icrc7_tokens : (opt nat, opt nat, principal) -> (
      RequestResult,
    ) query;
  icrc7_tokens_of : (Account, opt nat, opt nat, principal) -> (
      RequestResult,
    ) query;
  icrc7_transfer : (principal, vec TransferArg, principal) -> (
      RequestResult_13,
    );
  remove_all_groups : () -> ();
  remove_event : (text) -> (RequestResult_6);
  remove_group : (text) -> (RequestResult_6);
  subscribe_group : (vec Member, text, text) -> (RequestResult);
  whoami : () -> (principal) query;
}
